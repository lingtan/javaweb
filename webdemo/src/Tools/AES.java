package Tools;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

public class AES {

    static final String algorithmStr = "AES/ECB/PKCS5Padding";

    private static final Object TAG = "AES";

    static private KeyGenerator keyGen;

    static private Cipher cipher;

    static boolean isInited = false;

    private static  void init() {
        try {
            /**ä¸ºï¿½??ï¿??ï¿??ï¿????????ï¿??ï¿?? KeyGenerator å¯¹è±¡???
             *æ­¤ç±»???ï¿??ï¿??å¯¹ç§°ï¿??ï¿????ï¿½ï¿½???????ï¿½ï¿½???????ï¿½ï¿½??
             *ï¿????ï¿½ï¿½???????ï¿½ï¿½??ä½¿ï¿½?ï¿½ï¿½?ï¿½ç±»??????ï¿?? getInstance ç±»ï¿½?ï¿½ï¿½??????????????
             *KeyGenerator å¯¹è±¡??????ï¿??ä½¿ï¿½??ï¿??ï¿??å°±ï¿½??è¯´ï¿½????ï¿½ï¿½?????ï¿????ï¿½ï¿½??ï¿??
             *???ä»¥ï¿½??ï¿??ä½¿ï¿½?ï¿½ï¿½??ï¿?? KeyGenerator å¯¹è±¡??ï¿½ï¿½?????ï¿??ï¿??æ­¥ï¿½??ï¿????ï¿½ï¿½??
             *??????ï¿????ï¿½ï¿½????ï¿½ï¿½?????ä¸¤ï¿½??ï¿??ï¿??ï¿??ï¿???????ï¿½ï¿½????ï¿½ï¿½??ï¿??ä»¥ï¿½????ï¿½ï¿½??ï¿??ï¿??ï¿???????ï¿½ï¿½?????
             *ä¸¤ï¿½??ï¿????ï¿½ï¿½?????ï¿??ï¿????????å¯¹è±¡??????ï¿?????ï¿??
             *ï¿??ï¿??ï¿???????ï¿½ï¿½?????ï¿?????
             *??????ï¿????ï¿½ï¿½???????ï¿½ï¿½?ï¿½ï¿½?ï¿½ï¿½??ï¿????ï¿½ï¿½?ï¿½åº¦ ????????ï¿½ï¿½?? ???ï¿??å¿µï¿½??
             *ï¿?? KeyGenerator ç±»ä¸­???ï¿??ï¿?? init ??ï¿½ï¿½??ï¿??ï¿??????????ï¿½ï¿½??ä¸¤ä¸ª?????ï¿½ï¿½??å¿µï¿½???????ï¿½ï¿½??
             *ï¿?????ï¿??ï¿?????ï¿?? keysize ?????ï¿½ï¿½?? init ??ï¿½ï¿½??ï¿??
             *ï¿??ä½¿ï¿½?ï¿½ï¿½?ï¿½ï¿½?????ï¿??ï¿?????çº§ï¿½?????ï¿??ï¿??ï¿????? SecureRandom ï¿????ï¿½ï¿½??ä¸ºï¿½????ï¿½ï¿½??
             *ï¿??ï¿?????ï¿??ï¿????????ï¿??ï¿??ï¿????ï¿½ï¿½?????ï¿?? SecureRandom ï¿????ï¿½ï¿½?????ä½¿ï¿½?ï¿½ç³»ï¿?????ï¿??????????ï¿½ï¿½??ï¿?????
             *ï¿?? KeyGenerator ç±»ï¿½?????ï¿??ï¿??ï¿?????ï¿???????ï¿½ï¿½???????ï¿½ï¿½?? inti ??ï¿½ï¿½?????
             *???ä¸ºï¿½????ï¿½ï¿½??è¿°ï¿½??ï¿??ï¿???????ï¿½ï¿½?? init ??ï¿½ï¿½????ï¿½ï¿½?????ï¿????ï¿½ï¿½???????ï¿½ï¿½??
             *???ä»¥ï¿½?ï¿½ï¿½??ï¿??ï¿??ï¿????ï¿½ï¿½??ï¿??ï¿??ï¿?????ï¿??ï¿??ï¿??ï¿??ï¿????ï¿½ï¿½?ï¿½ï¿½?ï¿½ï¿½????ï¿½ï¿½??ï¿??ï¿??ï¿??????????ï¿½ï¿½??ï¿????????ï¿?????
             *??ï¿½ï¿½??ï¿??ï¿??ï¿????????ï¿?????
             *??ï¿½å·²ï¿??ï¿????ï¿½ï¿½?ï¿½ï¿½??ï¿??ï¿??ï¿??????????ï¿½ï¿½??????????ï¿½ï¿½??ï¿??
             *???ä¸¤ä¸ª??ï¿½ï¿½?? AlgorithmParameterSpec ?????ï¿½ï¿½?? init ??ï¿½ï¿½?????
             *??ï¿½ä¸­ï¿??ï¿????ï¿½ï¿½??ï¿?????ï¿??ï¿?? SecureRandom ?????ï¿½ï¿½??
             *??????ï¿??ï¿????ï¿½ï¿½??ï¿??å·²ï¿½??ï¿?????ï¿??ï¿?????çº§ï¿½??ï¿??ï¿??ï¿????? SecureRandom ï¿????ï¿½ï¿½?ï¿½ï¿½???????ï¿½ï¿½??
             *ï¿????????ï¿??ä¸ºç³»ï¿?????ï¿??????????ï¿½ï¿½??ï¿??ï¿?????ï¿??ï¿????????ï¿??ï¿??ï¿????ï¿½ï¿½?????ï¿?? SecureRandom ï¿????ï¿½ï¿½?????
             *ï¿?????å®?ï¿??ï¿½ï¿½??æ²¡ï¿½????ï¿½ï¿½????ï¿½ï¿½??ï¿????? KeyGeneratorï¿?????ï¿??ï¿????? init ??ï¿½ï¿½??ï¿??ï¿??
             *ï¿??ï¿?????ï¿??ï¿??ï¿??ï¿??é¡»ï¿½??ï¿??ï¿?????è®°ï¿½??ï¿??ï¿??è®¤ï¿½??ï¿????????
             */
            keyGen = KeyGenerator.getInstance("AES");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        // ???ï¿?????æ­¤ï¿½????ï¿½ï¿½????????ï¿??ä½¿ï¿½?ï¿½ï¿½?ï¿½ï¿½??ï¿??ï¿?????ï¿????ï¿½ï¿½?ï¿½åº¦???
        keyGen.init(128); //128ï¿?????AES???ï¿??
        try {
            // ??????ï¿??ï¿??ï¿????ï¿½ï¿½??ï¿??ï¿????ï¿½ï¿½?? Cipher å¯¹è±¡???
            cipher = Cipher.getInstance(algorithmStr);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        }
        //???ï¿??å·²ï¿½?????ï¿?????ï¿??ï¿?????ï¿??ï¿??
        isInited = true;
    }

    private static byte[] genKey() {
        if (!isInited) {
            init();
        }
        //ï¿????? ??????ï¿??ï¿??ï¿?????(SecretKey),
        //??ï¿½ï¿½??,???ï¿??ï¿??ï¿??ï¿?????,ï¿???????ï¿½ï¿½??ï¿???????ï¿½ï¿½?????ï¿????ï¿½ï¿½??ï¿?????æ­¤ï¿½????ï¿½ï¿½????????ï¿?????ï¿?????ï¿????? null???
        return keyGen.generateKey().getEncoded();
    }

    private static byte[] encrypt(byte[] content, byte[] keyBytes) {
        byte[] encryptedText = null;
        if (!isInited) {
            init();
        }
        /**
         *ï¿?? SecretKeySpec
         *???ä»¥ä½¿??ï¿½ï¿½?ï¿½ç±»??ï¿½ï¿½?ï¿½ï¿½??ï¿??ï¿??ï¿???????ï¿½ï¿½????????ï¿??ï¿?? SecretKeyï¿??
         *??????é¡»ï¿½??ï¿??ï¿??ï¿??ï¿????ï¿½ï¿½?? provider ???ï¿??SecretKeyFactory???
         *æ­¤ç±»ï¿??å¯¹ï¿½?ï¿½è¡¨ç¤ºä¸ºï¿??ï¿??ï¿???????ï¿½ï¿½??å¹¶ï¿½??æ²¡ï¿½??ä»»ï¿½??ï¿??ï¿????ï¿½ï¿½?ï¿½ï¿½???????ï¿½ï¿½????ï¿½ï¿½?????ï¿??ï¿????ï¿½ï¿½?????
         *????????ï¿½ï¿½????ï¿½ï¿½??ï¿??ï¿?????ï¿???????ï¿½ï¿½????????ï¿??ï¿??ï¿????ï¿½ï¿½??
         *æ­¤ï¿½???????ï¿½ï¿½??ï¿??ï¿????ï¿½ï¿½??ï¿?????ï¿???????ï¿½ï¿½???????????ï¿??ï¿??ï¿??ï¿??ï¿??ï¿?????ï¿????ï¿½ï¿½??
         */
        Key key = new SecretKeySpec(keyBytes, "AES");
        try {
            // ??ï¿½ï¿½????ï¿½ï¿½??ï¿?????ï¿?? cipher???
            cipher.init(Cipher.ENCRYPT_MODE, key);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        }
        try {
            //????????ï¿½ï¿½?????ï¿?????ï¿?????è§£ï¿½????ï¿½ï¿½??ï¿????????ï¿?????ï¿??ï¿??ï¿????ï¿½ï¿½?????ï¿?????(ï¿????ï¿½ï¿½??ï¿??ï¿????????)
            encryptedText = cipher.doFinal(content);
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return encryptedText;
    }

    private static byte[] encrypt(String content, String password) {
        try {
            byte[] keyStr = getKey(password);
            SecretKeySpec key = new SecretKeySpec(keyStr, "AES");
            Cipher cipher = Cipher.getInstance(algorithmStr);//algorithmStr
            byte[] byteContent = content.getBytes("utf-8");
            cipher.init(Cipher.ENCRYPT_MODE, key);//   Ê¼
            byte[] result = cipher.doFinal(byteContent);
            return result; //
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static byte[] decrypt(byte[] content, String password) {
        try {
            byte[] keyStr = getKey(password);
            SecretKeySpec key = new SecretKeySpec(keyStr, "AES");
            Cipher cipher = Cipher.getInstance(algorithmStr);//algorithmStr
            cipher.init(Cipher.DECRYPT_MODE, key);//   Ê¼
            byte[] result = cipher.doFinal(content);
            return result; //
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static byte[] getKey(String password) {
        byte[] rByte = null;
        if (password!=null) {
            rByte = password.getBytes();
        }else{
            rByte = new byte[24];
        }
        return rByte;
    }

    /**
     * ï¿??ï¿??ï¿????ï¿½è½¬??ï¿½ï¿½??16ï¿?????
     * @param buf
     * @return
     */
    public static String parseByte2HexStr(byte buf[]) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < buf.length; i++) {
            String hex = Integer.toHexString(buf[i] & 0xFF);
            if (hex.length() == 1) {
                hex = '0' + hex;
            }
            sb.append(hex.toUpperCase());
        }
        return sb.toString();
    }

    /**
     * ï¿??16ï¿????ï¿½è½¬???ä¸ºï¿½??ï¿?????
     * @param hexStr
     * @return
     */
    public static byte[] parseHexStr2Byte(String hexStr) {
        if (hexStr.length() < 1)
            return null;
        byte[] result = new byte[hexStr.length() / 2];
        for (int i = 0; i < hexStr.length() / 2; i++) {
            int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
            int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2),
                    16);
            result[i] = (byte) (high * 16 + low);
        }
        return result;
    }

    //æ³?ï¿???: ï¿????????password(ï¿????ï¿½ï¿½??é¡»ï¿½??16ï¿?????)
    private static final String keyBytes = "abcdefgabcdefg12";

    /**
     *???ï¿??
     */
    public static String encode(String content){
        //???ï¿??ï¿????????ï¿???????ï¿½ï¿½??,ï¿?????16ï¿????ï¿½ï¿½??ï¿??ï¿??ä¸²å½¢ï¿??ï¿?????
        return parseByte2HexStr(encrypt(content, keyBytes));
    }

    /**
     *è§£ï¿½??
     */
    public static String decode(String content){
        //è§£ï¿½??ï¿?????,???ï¿??ï¿????ï¿½ï¿½??ï¿??ï¿??ä¸²ï¿½?????16ï¿????ï¿½è½¬???ï¿??ï¿????ï¿½ï¿½??ï¿???????ï¿½ï¿½??,ï¿??ä¸ºï¿½??è§£ï¿½????????å®¹ï¿½?????
        byte[] b = decrypt(parseHexStr2Byte(content), keyBytes);
        String returnValue="";
		try {
			returnValue = new String(b,"UTF-8");//ï¿??ï¿?????ï¿??ä¹±ï¿½??
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return returnValue;
    }




}
